package com.example.tracktrigger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.tracktrigger.User;

import org.springframework.http.ResponseEntity;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;


@RestController // This means that this class is a Rest Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;


  @PostMapping(path="/signup") // Map ONLY POST Requests
  public ResponseEntity<String> addNewUser (HttpServletRequest request, 
		  @RequestParam String name, 
		  @RequestParam String username, @RequestParam String password,
		  @RequestParam String email, @RequestParam String phno,
		  @RequestParam String profession) {
	  
		if (userRepository.findByEmail(email) != null) {
			return ResponseEntity.badRequest().body("An account with this email exists!");
		}
		if (userRepository.findByUsername(username) != null) {
			return ResponseEntity.badRequest().body("Username already exists.");
		}
	
    User n = Helper.CreateUser(name, username, password, email, phno, profession);
    userRepository.save(n);
    return ResponseEntity.ok("Saved");
    
    /*
    //Send verification email
    VerificationToken v_token = new VerificationToken(n);
    verificationTokenRepository.save(v_token);
    String appUrl = request.getContextPath();
    String confirmationUrl = appUrl + "/verify-registration?token="+v_token.getVerificationToken();
    
	SimpleMailMessage v_email = new SimpleMailMessage();
    v_email.setTo(n.getEmail());
    v_email.setSubject("Account Verification");
    v_email.setText("To verify your account please click the below link"
    + "http://localhost:8080" + confirmationUrl);
    mailSender.send(v_email);
    
     */
    
  }
  /*
  @GetMapping(path="/verify-registration")
  public ResponseEntity <String> CompleteVerify(HttpServletRequest request, 
		  @RequestParam String token){
	  VerificationToken v_token = verificationTokenRepository.findByVerificationToken(token);
	  if(token != null)
      {
          User user = userRepository.(v_token.getUser().getEmailId());
          user.setEnabled(true);
          userRepository.save(user);
          modelAndView.setViewName("accountVerified");
      }
	  
	  return ResponseEntity.ok("Verified");
  } */

  @GetMapping(path="/all")
  public Iterable<User> getAllUsers() {
    return userRepository.findAll();
  }
  
}